name: Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    if: contains(github.event.head_commit.message, 'build') || contains(github.event.pull_request.title, 'build')
    name: Build ${{ matrix.os }} ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Set up Miniconda for Conda build
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        # miniconda-version: "latest"
        activate-environment: pst-env
        environment-file: env-template.yml
        auto-activate-base: false
        python-version: ${{ matrix.python-version }}

    - name: Install Conda dependencies
      run: |
        conda install -y conda-build anaconda-client  # Install Conda build tools
    # Install GDAL system dependencies based on the OS
    - name: Install GDAL system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
    - name: Install GDAL system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install gdal
        brew upgrade gdal
    - name: Install GDAL with Conda (Windows)
      if: runner.os == 'Windows'
      run: |
        conda install -y -c conda-forge gdal pytest hdf5  h5py

    - name: Install dependencies and polsartools pip package
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install -r requirements.txt
        python -m pip install .  

    - name: Test with pytest (Windows)
      if: runner.os == 'Windows'
      run: |
        cd tests
        python -m pytest -v ../tests/tests.py

    - name: Test with pytest (Linux/MacOS)
      if: runner.os != 'Windows'
      run: |
        cd tests
        python -m pytest -v ../tests/tests.py

    
    - name: Install cibuildwheel
      run: python -m pip install --upgrade pip cibuildwheel

    - name: Clean build artifacts
      run: |
        find . -name '*.so' -delete
        rm -rf build/ dist/ *.egg-info wheelhouse

##########################################################################
    # - name: Build wheels with cibuildwheel (Linux)
    #   if: runner.os == 'Linux'
    #   env:
    #     CIBW_BUILD: "cp39-manylinux_x86_64"  # Only for Linux (manylinux_x86_64)
    #     CIBW_OUTPUT_DIR: wheelhouse
    #   run: python -m cibuildwheel --output-dir wheelhouse

    # - name: Build wheels with cibuildwheel (macOS arm64)
    #   if: runner.os == 'macOS'
    #   env:
    #     CIBW_BUILD: "cp39-macosx_arm64"
    #     CIBW_OUTPUT_DIR: wheelhouse
    #   run: python -m cibuildwheel --output-dir wheelhouse


    # - name: Build wheels with cibuildwheel (Windows)
    #   if: runner.os == 'Windows'
    #   env:
    #     CIBW_BUILD: "cp39-win_amd64"  # For Windows x86_64
    #     CIBW_OUTPUT_DIR: wheelhouse
    #   run: python -m cibuildwheel --output-dir wheelhouse


##########################################################################

    - name: Create Conda environment (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
          # conda create -n build-env python=${{ matrix.python-version }} conda-build anaconda-client -y
          conda init bash 
          source ~/.bashrc 
          conda activate pst-env  # Activate the environment

          conda install --yes pip
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install .
          conda build ./conda-recipe --output-folder output

    - name: Create Conda environment (Linux/macOS)
      if: runner.os == 'Windows'
      run: |
          # Windows: Initialize Conda for PowerShell and activate environment
          conda init powershell  # Initialize Conda for PowerShell
          # Ensure Conda is loaded in the current PowerShell session
          $Env:PATH = [System.Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User)
          conda activate pst-env  # Activate the environment in PowerShell
      shell: pwsh -Command {0}  # Use PowerShell Core for Windows (pwsh)


    - name: Upload conda package
      uses: actions/upload-artifact@v4.6.0
      with:
        name: conda-package
        path: |
          output/**/*.tar.bz2
          output/**/*.conda